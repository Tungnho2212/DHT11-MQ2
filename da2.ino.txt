#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <DFRobotDFPlayerMini.h>
#include <ESP32Servo.h> // Thư viện tương thích ESP32
// Thông tin WiFi
const char* ssid = "TP-Link_15A0";
const char* password = "12206476";
// Địa chỉ server PHP để lưu dữ liệu và điều khiển quạt/LED/servo
const char* serverData = "http://192.168.0.103/sensordata/save_data.php";
const char* serverFanControl = "http://192.168.0.103/sensordata/fan_control.php";
const char* serverLedControl = "http://192.168.0.103/sensordata/led_control.php";
const char* serverDoorControl = "http://192.168.0.103/sensordata/door_control.php";
// Cảm biến DHT11
#define DHTPIN 15
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
// MQ2
#define MQ2_PIN 34
// DFPlayer Mini
#define RX_PIN 16
#define TX_PIN 17
HardwareSerial mySerial(1);
DFRobotDFPlayerMini myDFPlayer;
// Servo
#define SERVO_PIN 18
Servo doorServo;
// Ngưỡng khí gas
const int GAS_THRESHOLD = 300;
// Quạt
#define FAN_PIN 12
// LED
#define LED_PIN 13
// Trạng thái quạt, LED và cửa
bool fanState = false;
bool ledState = false;
bool doorOpen = false;
void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  dht.begin();
  doorServo.attach(SERVO_PIN);
  doorServo.write(90); // Ban đầu dừng servo
  // Cấu hình chân GPIO
  pinMode(FAN_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(FAN_PIN, LOW);
  digitalWrite(LED_PIN, LOW);

  // Khởi động WiFi
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Khởi động DFPlayer Mini
  mySerial.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);
  if (!myDFPlayer.begin(mySerial)) {
    Serial.println("DFPlayer Mini initialization failed!");
    while (true);
  }
  Serial.println("DFPlayer Mini ready!");
  myDFPlayer.volume(20);
}
void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // 1. Gửi dữ liệu cảm biến lên server
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    int mq2_value = analogRead(MQ2_PIN);

    String serverPath = serverData + String("?temperature=") + String(temperature) +
                        "&humidity=" + String(humidity) + "&mq2=" + String(mq2_value);

    http.begin(serverPath.c_str());
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      Serial.println("Sensor data sent successfully!");
    } else {
      Serial.print("Error sending data: ");
      Serial.println(httpResponseCode);
    }
    http.end();

    // 2. Lấy trạng thái quạt từ server
    http.begin(serverFanControl);
    httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String response = http.getString();
      response.trim();
      if (response == "ON" && !fanState) {
        fanState = true;
        digitalWrite(FAN_PIN, HIGH);
      } else if (response == "OFF" && fanState) {
        fanState = false;
        digitalWrite(FAN_PIN, LOW);
      }
    }
    http.end();
    // 3. Lấy trạng thái LED từ server
    http.begin(serverLedControl);
    httpResponseCode = http.GET();
    if (httpResponseCode > 0) {
      String response = http.getString();
      response.trim();
      if (response == "ON" && !ledState) {
        ledState = true;
        digitalWrite(LED_PIN, HIGH);
      } else if (response == "OFF" && ledState) {
        ledState = false;
        digitalWrite(LED_PIN, LOW);
      }
    }
    http.end();
    // 4. Lấy trạng thái cửa từ server
    http.begin(serverDoorControl);
    httpResponseCode = http.GET();
    if (httpResponseCode > 0) {
      String response = http.getString();
      response.trim();
      if (response == "OPEN" && !doorOpen) {
        doorServo.write(180); 
        delay(250);          
        doorServo.write(90);  
        doorOpen = true;
        Serial.println("Door opened");
      } else if (response == "CLOSE" && doorOpen) {
        doorServo.write(0);  
        delay(250);          
        doorServo.write(90); 
        doorOpen = false;
        Serial.println("Door closed");
      }
    } else {
      Serial.print("Error getting door status: ");
      Serial.println(httpResponseCode);
    }
    http.end();
    // 5. Kiểm tra ngưỡng khí gas
    if (mq2_value > GAS_THRESHOLD) {
      Serial.println("Gas level too high! Playing alert sound...");
      myDFPlayer.playFolder(1, 5);
      delay(6000);
    }
  } else {
    Serial.println("WiFi not connected!");
  }
  delay(4000);
